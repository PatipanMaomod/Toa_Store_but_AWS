// Generate background particles
function createParticles() {
    const particlesContainer = document.querySelector('.bg-particles');
    if (!particlesContainer) return;
    
    for (let i = 0; i < 50; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.left = Math.random() * 100 + '%';
        particle.style.width = particle.style.height = Math.random() * 4 + 2 + 'px';
        particle.style.animationDelay = Math.random() * 8 + 's';
        particle.style.animationDuration = (Math.random() * 3 + 5) + 's';
        particlesContainer.appendChild(particle);
    }
}

let cartItems = [];

// Load cart items from API
async function loadCartItems() {
    const container = document.getElementById('cart-items-container');
    const cartCount = document.getElementById('cart-count');

    if (!container || !cartCount) return;

    try {
        const res = await fetch("/api/cart", { credentials: "include" });
        if (!res.ok) {
            const data = await res.json();
            showToast(data.error || "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");
            // Redirect to login if not authenticated
            window.location.href = "/";
            return;
        }

        cartItems = await res.json();
        renderCart();
        updateSummary();
        
    } catch (err) {
        console.error("Load cart error:", err);
        showToast("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ");
    }
}

function renderCart() {
    const container = document.getElementById('cart-items-container');
    const cartCount = document.getElementById('cart-count');

    if (!container || !cartCount) return;

    if (cartItems.length === 0) {
        container.innerHTML = `
          <div class="empty-cart">
            <div class="empty-cart-icon">üõí</div>
            <h3>‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤</h3>
            <p>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠!</p>
            <a href="/products" class="continue-shopping">‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ä‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á</a>
          </div>
        `;
        cartCount.textContent = '0';
        return;
    }

    let totalItems = 0;
    container.innerHTML = cartItems.map((item) => {
        totalItems += item.quantity;
        const imageUrl = item.image_main && item.image_main.length > 0 
            ? item.image_main[0] 
            : 'https://via.placeholder.com/80';

        return `
          <div class="cart-item">
            <div class="item-image">
              <img src="${imageUrl}" alt="${item.name}" />
            </div>
            <div class="item-details">
              <div class="item-name">${item.name}</div>
              <div class="item-price">‡∏ø${item.price.toFixed(2)} ‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô</div>
              <div class="item-stock">‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${item.stock} ‡∏ä‡∏¥‡πâ‡∏ô</div>
            </div>
            <div class="quantity-controls">
              <button class="quantity-btn" onclick="changeQuantity(${item.cart_id}, ${item.quantity - 1})">-</button>
              <span class="quantity-display">${item.quantity}</span>
              <button class="quantity-btn" onclick="changeQuantity(${item.cart_id}, ${item.quantity + 1})">+</button>
            </div>
            <div class="item-total">
              <div class="item-total-price">‡∏ø${(item.price * item.quantity).toFixed(2)}</div>
              <button class="remove-btn" onclick="removeItem(${item.cart_id})">‡∏•‡∏ö</button>
            </div>
          </div>
        `;
    }).join('');

    cartCount.textContent = totalItems;
}

// Change quantity of cart item
async function changeQuantity(cartId, newQuantity) {
    if (newQuantity < 1) {
        removeItem(cartId);
        return;
    }

    try {
        const res = await fetch(`/api/cart/${cartId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify({ quantity: newQuantity })
        });

        const data = await res.json();
        if (!res.ok) {
            showToast(data.error || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ");
            return;
        }

        // Reload cart items
        await loadCartItems();
        showToast("‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
        
    } catch (err) {
        console.error("Update quantity error:", err);
        showToast("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ");
    }
}

// Remove item from cart
async function removeItem(cartId) {
    try {
        const res = await fetch(`/api/cart/${cartId}`, {
            method: "DELETE",
            credentials: "include"
        });

        const data = await res.json();
        if (!res.ok) {
            showToast(data.error || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ");
            return;
        }

        // Reload cart items
        await loadCartItems();
        showToast("‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
        
    } catch (err) {
        console.error("Remove item error:", err);
        showToast("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ");
    }
}

function updateSummary() {
    let subtotal = 0;

    cartItems.forEach(item => {
        subtotal += item.price * item.quantity;
    });

    const discount = subtotal > 2000 ? subtotal * 0.1 : 0; // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 10% ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô 2000 ‡∏ö‡∏≤‡∏ó
    const tax = (subtotal - discount) * 0.07; // VAT 7%
    const shipping = subtotal > 800 ? 0 : 50; // ‡∏ü‡∏£‡∏µ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô 800 ‡∏ö‡∏≤‡∏ó
    const total = subtotal - discount + tax + shipping;

    const subtotalEl = document.getElementById('subtotal');
    const discountEl = document.getElementById('discount');
    const taxEl = document.getElementById('tax');
    const shippingEl = document.getElementById('shipping');
    const totalEl = document.getElementById('total');

    if (subtotalEl) subtotalEl.textContent = `‡∏ø${subtotal.toFixed(2)}`;
    if (discountEl) discountEl.textContent = `-‡∏ø${discount.toFixed(2)}`;
    if (taxEl) taxEl.textContent = `‡∏ø${tax.toFixed(2)}`;
    if (shippingEl) shippingEl.textContent = shipping === 0 ? '‡∏ü‡∏£‡∏µ' : `‡∏ø${shipping.toFixed(2)}`;
    if (totalEl) totalEl.textContent = `‡∏ø${total.toFixed(2)}`;
}

// Load cart count for header
async function loadCartCount() {
    const cartCount = document.getElementById("cartCount");
    if (!cartCount) return;

    try {
        const res = await fetch("/api/cart", { credentials: "include" });
        if (!res.ok) {
            cartCount.textContent = "0";
            return;
        }

        const cartItems = await res.json();
        const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
        cartCount.textContent = totalItems;
    } catch (err) {
        console.error("Load cart count error:", err);
        cartCount.textContent = "0";
    }
}

// Show toast notification
function showToast(message, type = "success") {
    // Create toast element if it doesn't exist
    let toast = document.getElementById("toast");
    if (!toast) {
        toast = document.createElement("div");
        toast.id = "toast";
        toast.className = "toast";
        document.body.appendChild(toast);
    }

    toast.textContent = message;
    toast.className = `toast ${type} show`;

    setTimeout(() => {
        toast.className = toast.className.replace("show", "").trim();
    }, 3000);
}

// Proceed to payment (placeholder)
async function proceedToCheckout() {
    if (cartItems.length === 0) {
        showToast("‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤");
        return;
    }

    // Here you would implement actual payment processing
    // For now, just show a success message
    alert("‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï\n‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
}

// Initialize page
document.addEventListener('DOMContentLoaded', async function () {
    createParticles();
    await loadCartItems();
});
